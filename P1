'use server';

/**
 * @fileOverview Analyzes Python code using GenAI to identify potential errors, bugs, or inefficiencies.
 *
 * - analyzeCode - A function that analyzes the code.
 * - AnalyzeCodeInput - The input type for the analyzeCode function.
 * - AnalyzeCodeOutput - The return type for the analyzeCode function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeCodeInputSchema = z.object({
  code: z.string().describe('The Python code to analyze.'),
});
export type AnalyzeCodeInput = z.infer<typeof AnalyzeCodeInputSchema>;

const AnalyzeCodeOutputSchema = z.object({
  analysis: z.string().describe('The analysis of the Python code, including potential errors, bugs, or inefficiencies.'),
  suggestions: z.string().describe('Suggestions for fixing identified issues in the Python code.'),
});
export type AnalyzeCodeOutput = z.infer<typeof AnalyzeCodeOutputSchema>;

export async function analyzeCode(input: AnalyzeCodeInput): Promise<AnalyzeCodeOutput> {
  return analyzeCodeFlow(input);
}

const analyzeCodePrompt = ai.definePrompt({
  name: 'analyzeCodePrompt',
  input: {
    schema: z.object({
      code: z.string().describe('The Python code to analyze.'),
    }),
  },
  output: {
    schema: z.object({
      analysis: z.string().describe('The analysis of the Python code, including potential errors, bugs, or inefficiencies.'),
      suggestions: z.string().describe('Suggestions for fixing identified issues in the Python code.'),
    }),
  },
  prompt: `You are an AI expert in analyzing Python code.

You will be provided with Python code, and your task is to analyze it for potential errors, bugs, and inefficiencies.

Provide a detailed analysis of the code and suggest improvements.

Code:
\`\`\`python
{{{code}}}
\`\`\`
`,
});

const analyzeCodeFlow = ai.defineFlow<
  typeof AnalyzeCodeInputSchema,
  typeof AnalyzeCodeOutputSchema
>({
  name: 'analyzeCodeFlow',
  inputSchema: AnalyzeCodeInputSchema,
  outputSchema: AnalyzeCodeOutputSchema,
}, async input => {
  const {output} = await analyzeCodePrompt(input);
  return output!;
});
